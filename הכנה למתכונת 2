// מערכים

1.כתוב פעולה שמקבלת מערך מטיפוס מספר שלם.  הפעולה תחזיר את המיקום של 
     המספר הקטן ביותר.  



public static int f1(int[] arr) 
{
  int location =0;
  int min = arr[0];
  for(int i=0 ; i<arr.lenght; i++)
  {
    if (arr[i]<min)
    {
      min= arr[i];
      location = i
    }
  }
  return location;
}




2.כתוב פעולה שמקבלת מערך מטיפוס מספר שלם, מספר שלם n ומספר שלם m.
     הפעולה תחזיר את ממוצע המספרים שנמצאים בין אינדקס n  ל- m.  (m>n)



public static int f1(int[] arr , int m , int n)
{
  int sum = 0;
  int count = 0;
  for(int i=n ; i<=m; i++)
  {
    
      sum = sum + arr[i];
      count++;
    
  }
  return sum/count;
}





3.כתוב פעולה שמקבלת מערך מטיפוס מספר שלם.  הפעולה תחזיר את סכום שני   
     המספרים הגדולים ביותר במערך.



public static int f1(int[] arr )
{
    int max1 = 0;
	    int max2 = 0;
	    for(int i=0 ; i<arr.length; i++)
	    {
	      if(arr[i]> max1 && max1<max2)
	    	  
	        max1 = arr[i];
	      else if (arr[i]> max2)
	    	  	max2 = arr[i];
	    }
	   
	    return max1+max2;
}



4.  כתוב פעולה שמקבלת מערך מטיפוס מספר שלם.  הפעולה תחזיר מערך חדש אשר מכיל 
     רק את המספרים האי-זוגיים מהמערך המקורי.



public static int[] f1(int[] arr )
	{
		int count = 0;
		int index=0;
		for(int i=0 ; i<arr.length; i++) {
			if (arr[i]%2 !=0) {
				count++;
			}
		}
		
		int arr2 []= new int[count];
		for(int i=0 ; i<arr.length; i++) {
			if (arr[i]%2 !=0) {
				
				arr2[index] = arr[i];
				index++;
			}
		}
		for(int i=0 ; i<arr2.length; i++) {
			 System.out.println(arr2[i]);
		}
		return arr2;
	}



5. כתוב פעולה שמקבלת שני מערכים מטיפוס מספר שלם.
     הפעולה תחזיר אמת אם סכום המספרים עד המיקום ה-k שווה בשני המערכים,  
     אחרת תחזיר שקר.



public static boolean f1(int[] arr  , int[] arr2 , int k)
	{
		int sum1 = 0;
		int sum2=0;
		for(int i=0 ; i<k; i++) {
			sum1 = sum1 + arr[i];
			sum2 = sum2 + arr2[i];
			
		}
		if (sum1 != sum2) {
			System.out.println("false ");
			return false;
		}
		else
			
			System.out.println("true ");
			return true;
		
		
	}


// מחלקות

1.











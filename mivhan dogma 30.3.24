1. החזר אמת אם מדובר בתור זוגי מושלם מהי סיבוכיות הריצה
public static boolean perfect_even(Queue<Integer> q)
{
  int count = 0;
  int sum = 0 , x = 0;
	Queue<Integer> temp = new Queue<Integer>();
	while(!q.isEmpty())
	{
     x = q.remove();
		temp.insert(x);
		count++;
    sum += x;
	}
	while(!temp.isEmpty())
		q.insert(temp.remove());
  
  if (count%2==0 && sum%2==0)
    return true;
  else
    return false;
}

סיבוכיות: o(n)


2.מספרים זוגיים בראש התור אי זוגיים בסופו

public static Queue<Integer>  arrange(Queue<Integer> q)
{
  int x = 0;
  Queue<Integer> temp1 = new Queue<Integer>();
	Queue<Integer> temp2 = new Queue<Integer>();

 while (!q.isEmpty())
		{
			x = q.remove();

			if (x % 2 == 0)
				temp1.insert(x);
      else 
        temp2.insert(x);
      }
   while (!temp2.isEmpty())
   {
     x=temp2.remove();
     temp1.insert(x);
   }

   return temp1;
   


}
סיבוכיות o(n)

3. סכום של כל שני מספרים לא בהכרח צמודים גדול מ k







4. כתוב פעולה שתדפיס את המילה הארוכה ביותר בשרשרת 

public static void print(Node<String> n)
{
  String str = "" 
  int lenght = 0;
  Node<String> pos = n;
	
	while (pos != null)
	{
		
    if (lenght<pos.getValue().Lenght)
    {
      lenght =pos.getValue().Lenght();
      str= pos.getValue();
    }
    
		pos = pos.getNext();
	}
 System.out.println(str)

}
סיבוכיות o(n)


5. 
 public static Node<Integer>  chain(Node<String> n1, Node<String> n2 )
 {
   int i =0;
   int number = 0;
   Node<Integer>  temp = null;
	  Node<Integer>  pos = n1;
	  Node<Integer>  pos2 = n2;
   Node<Integer>  pos3 = null;
  
   int[] array = new int[n2.size()];
   int[] array2 = new int[n1.size()];
   while (pos2 != null)
   {
     
      array[i] = pos2.getValue();
      pos2 = pos2.getNext();
      i++;
        
   }
   i = 0;
while (pos1 != null)
   {
     
      array2[i] = pos1.getValue();
      pos1 = pos1.getNext();
      i++;
        
   }
for(int y = 0; y< array2.size(); y++)
{
    number = array2[y];
    for(int z = 0; z< array.size(); z++)
    {
        if (number == array[z])
        {
            if (pos3 == null)
            {
            pos3 = new Node<Integer>(number);
            temp = pos3;
            }
      	    else
           {
      		      temp.setNext(new Node<Integer>(number));
				        temp = temp.getNext();
           }
        }
      }
    }
return pos3;
}
   

 }




6. כתוב פעולה אשר מקבלת תור שלמים לוקחת שני מספרים ומכניסה לתוך שרשרת חוליות אשר מכילה את המספר הראשון בכמות הפעמים של המספר השני


public static Node<Integer>  tempo(Queue<Integer> q)
{
	Node<Integer>  temp = null;
	Node<Integer>  pos = null;
	int x = 0;
	int y = 0;
	while(!q.isEmpty())
	{
		x=q.remove();
		y = q.remove();
		for (int i = 0; i<y ; i++)
		{
			if (temp == null)
			{
				temp = new Node<Integer>(x);
				pos = temp;
			}
			
			
			else
			{
				pos.setNext(new Node<Integer>(x));
				pos = pos.getNext();
			}

		}
		
	}
	return temp;
	
}

סיבוכיות: o(n^2)


7. כתוב פעולה אשר מקבלת כפרמטר תור q   מטיפוס מספר שלם , מספר שלם x,  ומספר שלם k.
הפעולה תוסיף את ערכו של x לכל המספרים בתור אשר מתחלקים ב-k ללא  שארית. 
     מהי סיבוכיות זמן הריצה של הפעולה שכתבת?  

public static void  add(Queue<Integer> q , int x , int k)
{
	int y = 0;
	Queue<Integer> temp = new Queue<Integer>();
	while(!q.isEmpty())
	{
		y = q.remove();
		if (y%k == 0)
		{
			temp.insert(y+x);
		}
		else
			temp.insert(y);

	}
	while(!temp.isEmpty())
		q.insert(temp.remove());

}

סיבוכיות o(n)

8. כתוב פעולה אשר מקבלת כפרמטר תור q   מטיפוס תו   (Queue<Character>  q)
     הפעולה תחזיר אמת אם קיימים שני תווים צמודים זהים בתור q, אחרת תחזיר 
     שקר.


public static boolean  check(Queue<Character> q )
{
	int x =0;
	while (!q.isEmpty())
	{
		x= q.remove();
		if (x == q.head())
		{
			return true;
		}
		
	}
	return false;
}

סיבוכיות o(n)


9.

public static boolean canFormString(Queue<Character> q, String s)
{
	int i = 0;
    while (!q.isEmpty()) {
        char c = q.remove();
        if (c != s.charAt(i)) {
            return false;
        }
        i++; 
    }
	return true;
	
      
}

סיבוכיות: o(n)



10. "תור משולש" הינו תור של מטיפוס מספר שלם אשר: 
      א. הינו בגודל מספר אשר מתחלק ב-3 ללא שארית.
      ב.  אינו ריק (אינו null).
      ג.  סכום המספרים בתור משולש חייב להיות מספר אשר מתחלק ב-3.
      ד. חלוקה של התור לשלושה חלקים שווים, יכילו את אותם המספרים בדיוק.
      דוגמה:
     התור הבא הינו "תור משולש":   q:[3 , 1 , 5 , 3 , 1 , 5 , 3 , 1 , 5]
     כתוב פעולה אשר מקבלת תור של שלמים q.
     הפעולה תחזיר אמת אם התור הינו "תור משולש", אחרת תחזיר שקר.



public static boolean tringleQ(Queue<Character> q)
{
	int sum = 0;
	Queue<Integer> temp = new Queue<Integer>();
	Queue<Integer> temp2 = new Queue<Integer>();
	Queue<Integer> temp3 = new Queue<Integer>();
	boolean flag = true;
	// תנאי 1+2
	if (q.size%3 == 0 && q.size!=0)
	{
		flag = true;
	}
	else
		return false;

	// תנאי 3

	while (!q.isEmpty())
	{
		sum = sum +q.remove();
		temp.insert(q.head());
	}
	if (sum %3 == 0)
		flag = true;
	else
		return false;

	// תנאי 4

	while(!temp.isEmpty())
		q.insert(temp.remove());
	for (int i =0; i<q.size()/3 ; i++)
	{
		temp.insert(q.remove());
	}

	for ( i =0; i<q.size()/2 ; i++)
	{
		temp2.insert(q.remove());
	}

	for ( i =0; i<q.size() ; i++)
	{
		temp3.insert(q.remove());
	}

	for (i =0; i<temp.size() ; i++)
	{
		if (temp.head() == temp2().head && temp2.head() == temp3.head())
		{
			temp.remove();
			temp2.remove();
			temp3.remove();
		}
		else
			return false;
	}


	return true;

	

	

}


סיבוכיות: o(n)






